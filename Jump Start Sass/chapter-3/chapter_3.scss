/* Variables | Chapter 3 */
//VARIABLES
//-------Sample


// Variable assignment
$my-variable: 42px;

// Variable usage
.foo {
 width: $my-variable;
}


//DATA TYPES
//------Sample


//STRINGS
//------Sample


$my-variable: 'Hello world!';

//-------Sample

$font-name: 'Helvetica';
$font-type: sans-serif;

.foo {
 font-family: $helvetica, $font-type;
}


//-------Sample

$base-path: '/images/';
$file-name: 'kittens';
$extension: 'png';
$file-path: $base-path + $file-name + '.' + $extension;
// -> '/images/kittens.png'


//NUMBERS

//-------Sample

$container-max-width: 1180px;
.container {
 width: 100%;
 margin: 0 auto;
 max-width: $container-max-width;
}


//-----Sample

$element-width: 400px;
/**
 * 1. Size the element
 * 2. Horizontally center the element in its container
 * @TODO: move to CSS transforms once we drop support for IE 8
 */
.foo {
 width: $element-width; /* 1 */
 position: absolute; /* 2 */
 left: 50%; /* 2 */
 margin-left: ($element-width / -2); /* 2 */
}


//-----Sample

.foo {
    $gap: 20px;
    // No variable nor parentheses: no division performed
    font: 16px / 2 sans-serif;
    // Wrapping parentheses: division returning 8px
    padding: (16px / 2);
    // Member as variable: division returning 10px
    margin: $gap / 2;
    // Arithmetic expression: calculation returning 308px
    width: 300px + 16px / 2;
   }


//UNITS

//-----Sample

$value: 42;
$good: $value * 1px; //42px valid number
$bad: $value + px; //composing a string


//-----Sample

$initial-value: 42;
$value-in-px: ($initial-value * 1px); // 42px
$unitless-value: ($value-in-px / 1px); // 42


//COLORS
//------Sample
$brand-color: #BADA55;
.logo {
 color: $brand-color;
}

//-----Sample
.message {
    padding: 10px;
    border: 1px solid currentcolor;
   }
   .message-info {
    $color: blue;
    color: $color;
    background-color: lighten($color, 20%);
   }
   .message-danger {
    $color: red;
    color: $color;
    background-color: lighten($color, 20%);
   }
   .message-confirm {
    $color: green;
    color: $color;
    background-color: lighten($color, 20%);
   }


//BOOLEANS
//-----Sample
$support-legacy-browsers: true;
@if $support-legacy-browsers {
 .clearfix {
 *zoom: 1;
 }
}
.clearfix:after {
 content: '';
 display: table;
 clear: both;
}

//THE NOT KEYWORD
//-----Sample
$bool: false;
// "if not false"
// which can be rewritten as: "if true"

@if not $bool {
    // We get in there
   }

   
//----Sample 
$value: 'Hello world!';
$coerced-value: not not $value; // true


//NULL

//-----Sample
$type: type-of(null); // null
$type: type-of(NULL); // string
$type: type-of('null'); // string
$type: type-of('n' + 'u' + 'LL'); // string


//----Sample
$value: null;
.foo {
 // This declaration will not be output since
 // the variable is evaluated as `null`
 color: $value;
}


//----Sample
@mixin absolute($top: null, $right: null, $bottom: null, $left:
âž¥ null) {
 position: absolute;
 top: $top;
 right: $right;
 bottom: $bottom;
 left: $left;
}



// List

$list: (42, hotpink, 'kittens');

$empty-list: ();

$value: Hello World;
$type: type-of($value); //list
$length: length($value); //2
$separator: list-separator($value); //space


$value: ('Hello', 'World');
$type: type-of($value); //list
$length: length($value); //2
$separator: list-separator($value); //comma


$value: 'foo';
$length: length($value); //1
$type: type-of($value); //string


$value: ('foo',);
$length: length($value); //1
$type: type-of($value); //list



//Maps

$message-themes: (
    'info': deepskyblue,
    'danger': tomato,
    'warning': gold,
    'confirm': lightgreen,
);


.message-info { color: map-get($message-themes, 'info'); }
.message-danger { color: map-get($message-themes, 'danger'); }
.message-warning { color: map-get($message-themes, 'warning'); }
.message-confirm { color: map-get($message-themes, 'confirm'); }


$color-names: (
    #ff0000: 'blood',
    #00ff00: 'grass',
    #0000ff: 'ocean',
);

















