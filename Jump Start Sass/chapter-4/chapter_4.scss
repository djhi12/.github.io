//FUNCTION

//----Sample
// Using the `darken(..)` built-in Sass function
.foo {
    color: darken(#BADA55, 4.2%); // #B3D643
   }
   
//----Sample
   // The `get-base-url()` function has no parameter
@function get-base-url() {
    @return '/assets/';
   }
   // Usage
   .module {
    background-image: url(get-base-url() + 'unicorn.png');
   }

   
   //----Sample
   @function get-base-url() {
    @return '/assets/';
   }
   .module {
    // Shadow `get-base-url()` function within `.module {}`
    @function get-base-url() {
    @return 'http://cdn.example.com/assets/';
    }
    background-image: url(get-base-url() + 'unicorn.png');
   }

   //----Sample
   .module {
    background-image: url('http://cdn.example.com/assets/unicorn.png');
   }
   .foo {
    background-image: url('/assets/kittens.png');
   }
   


   //PARAMETERS

   //----Sample
   @function multiply($a, $b) {
    @return ($a * $b);
   }
   

//----Sample 
// `$a` is mandatory and `$b` is optional (default value being 2)
@function multiply($a, $b: 2) {
   @return ($a * $b);
  }


  //----Sample 
  // Throws an error:
// > `Required argument $b must come before any optional arguments.`
@function multiply($a: 2, $b) {
   @return ($a * $b);
  }

  

  //----Sample 
  $element-width: 400px;
.foo {
 // Calling `multiply(..)` with arguments in the defined order
 width: multiply($element-width, 3); // 1200px
 // Calling `multiply(..)` relying on default value
 // for second parameter
 padding: multiply(10px); // 20px
}
.bar {
 // Calling `multiply(..)` using keyword arguments
 width: multiply($b: 3, $a: $element-width); // 1200px
}



//----Sample
@function set-color-theme(
 $primary,
 $secondary: darken($primary, 10%),
 $tertiary: lighten($primary, 10%)
) {
 // Do something
}
$color-theme: set-color-theme(hotpink, $tertiary: pink);



//----Sample 
// Just for the sake of demonstration, here's a function declaration
@function my-function() {
   @return 'foo';
  }
  // Calling the function in itself does not work and throws an error:
  // > `Invalid CSS after " my-function()": expected "{", was ";"`
  .foo {
   my-function();
  }
  // Calling the function in place of a property works as long as it
  // is properly interpolated. See chapter 3.
  .foo {
   #{my-function()}: 'bar';
  }
  // Calling the function in place of a selector works as long as it
  // is properly interpolated. See chapter 3.
  .foo, #{my-function()} {
   content: 'bar';
  }
  // Calling the function inside a variable value works perfectly.
  $foo: my-function();
  // Calling the function in place of a media query value works
  // perfectly.
  @media (min-width: my-function()) { .. }
  // Calling the function in place of a feature query value works
  // perfectly.
  @supports (content: my-function()) { .. }
  
  
  //----Sample 
  // `map-deep-get` intends to help getting values
// deeply nested in maps
// The first parameter is the map to browse
// Any parameter after that are keys nested within each others
@function map-deep-get($map, $keys...) {
   @each $key in $keys {
   $map: map-get($map, $key);
   }
   @return $map;
  }

  
  